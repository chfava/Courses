options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< WHILE: "while" > |
	< FOR: "for" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" >
	// À compléter au besoin
}

// Operators
TOKEN :
{
	<ASSIGN: < EQUAL >  > |
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |

	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |


	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	// À compléter au besoin
	//Extra-Add-on's
	< RBRACKET: "[" > |
	< LBRACKET: "]" > |
	< RPLUS: "+." >
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}







//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 ( Stmt() )*
}

void Stmt() : { }
{

	AssignStmt() <SEMICOLON>|
	ForStatement()              //new for statement()
}

void AssignStmt() : { Token t;}   //all new function
{
	LOOKAHEAD(2) IntAssignStmt() |
	LOOKAHEAD(2) RealAssignStmt()|
	LOOKAHEAD(2) ArrayAssignStmt()
}


//all new -----------------

//--------Q1 c) ------------

void IntAssignStmt() : {}
{
	(
        Identifier() <ASSIGN>

	) IntExpr()
}

void RealAssignStmt() : {}
{
	(
        (LOOKAHEAD(2) Identifier() <RBRACKET> IntExpr() <LBRACKET> | Identifier()) "=."

	) FloatExpr()
}

void ArrayAssignStmt() : {}
{
	(
        Identifier() "=*"

	) ArrayExpr()
}

void ForStatement() : {}                //-----Q1 f) ------
{
    (
        "for" Identifier() "in" ArrayBasicExpr() "do{"
        Block()
        "}"
    )

}

//-----end new --------------//


void Expr() : {}
{
    LOOKAHEAD(2) IntExpr()|
    LOOKAHEAD(2) FloatExpr()|        //new
    ArrayExpr()                     //new
}

void IntExpr() : {}
{
    IntAddExpr()
}

void IntAddExpr() : { Token t;}
{
    IntMultExpr() (LOOKAHEAD(2)                 //new -> LOOKAHEAD ??
        (t = <PLUS> | t = <MINUS>) IntMultExpr()
    )*
}

void IntMultExpr() : { Token t;}
{
    IntNegExpr() (
        (t = <FOIS> | t = <DIV>) IntNegExpr()

    )*
}



void IntNegExpr() : {}
{
	(
	    <MINUS> IntBasicExpr()
	) |
	IntBasicExpr()
}

void IntBasicExpr() : {}
{
	LOOKAHEAD(2) Identifier()|
	IntValue() |
	LOOKAHEAD(2)<LPAREN> IntExpr() <RPAREN>

}



//------ all new --------------------

//------- Q1 b) -------- FLOAT ->RÉELS

void FloatExpr() : {}
{
    FloatAddExpr()
}

void FloatAddExpr() : { Token t;}
{
    FloatMultExpr() (
        (t = "+." | t = "-.") FloatMultExpr()
    )*
}

void FloatMultExpr() : { Token t;}
{
    FloatNegExpr() (
        (t = "*." | t = "/.") FloatNegExpr()

    )*
}



void FloatNegExpr() : {}
{
	(
	    "-." FloatBasicExpr()
	) |
	FloatBasicExpr()
}

void FloatBasicExpr() : {}
{
	LOOKAHEAD(2) ArrayBasicExpr() "[" IntExpr() "]"|
	Identifier()|
	RealValue() |
	LOOKAHEAD(2) ("(" FloatExpr() ")")

}


//---- Q1 - e)

void ArrayExpr() : {}
{
    ArrayConcExpr()
}

void ArrayConcExpr() : { Token t;}
{
    ArrayRepExpr() (
        "|" ArrayRepExpr()
    )*
}

void ArrayRepExpr() : { Token t;}
{
    (LOOKAHEAD(2) IntExpr()
        t = "#")* ArrayRevExpr()


}



void ArrayRevExpr() : {}
{
	(
	    "~" ArrayBasicExpr()
	) |
	ArrayBasicExpr()
}



void ArrayBasicExpr() : {}
{
	Identifier()|
    ArrayValue() |
    "(" ArrayExpr() ")"

}

void ArrayValue() : {}
{
	"[" FloatExpr()
	("," FloatExpr())*
	 "]"
}




//----end all new ----------------------




void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}


void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}



